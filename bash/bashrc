# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# http://mywiki.wooledge.org/DotFiles

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
  if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
  else
    color_prompt=
  fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto -F --group-directories-first'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

# Apelidos
alias sb='source "$HOME/.bashrc"'
alias showppa='echo "/etc/apt/sources.list.d" && ls /etc/apt/sources.list.d'
alias diff='diff --color=auto'
alias path='echo $PATH | tr ":" "\n"'
alias glo='git log --oneline'
alias gl='sh ~/scripts/git-stuff/git-log-main-master.sh --oneline'
alias gds='git diff --staged'
alias gd='git diff'
alias gs='git status'
# alias hidecursor='unclutter -root -idle 3 -grab &'
# alias simplexev='xev | awk -F'[ )]+' '/^KeyPress/ { a[NR+2] } NR in a { printf "%-3s %s\n", $5, $8 }''
alias pwdcp="pwd | tr -d '\n' | xclip -selection clipboard && pwd"
alias normalizechmod='sh ~/scripts/chmod-back-to-normal.sh'
alias browsersync='browser-sync start --server --directory --files **/*'
alias vimtime='nvim --startuptime nvim_startuptime.log'
alias vimrc='nvim ~/.config/nvim/init.vim'
alias bashrc='nvim ~/.bashrc'
alias tmuxrc='nvim ~/.tmux.conf'
alias awerc='nvim ~/.config/awesome/rc.lua'
alias alrc='nvim ~/.config/alacritty/alacritty.yml'
alias notouchpad='xinput disable Elan\ Touchpad'
alias vimgit='git diff --name-only | sort -u | xargs nvim'
alias tmuxls='sh ~/scripts/parse-tmux-ls.sh'
# alias rubomaster="git diff master --name-only | sort -u | tr '\n' ' ' | xclip -selection clipboard && xclip -selection clipboard -out | xargs -d ' ' -Ix echo x"
# alias rspecmaster="git diff master --name-only | sort -u | awk '/spec.*_spec\.rb/' | tr '\n' ' ' | xclip -selection clipboard && xclip -selection clipboard -out | xargs -d ' ' -Ix echo x"
alias rubomaster='sh ~/scripts/git-stuff/get-files-rubocop.sh'
alias rspecmaster='sh ~/scripts/git-stuff/get-files-rspec.sh'
alias readme='ls | grep -i readme | xargs glow -p'

if [ -f "$HOME/.bash_aliases" ]; then
  source "$HOME/.bash_aliases"
fi

# Git Branch
git_color() {
  # I have to keep track of last exit code so I can return it, otherwise
  # this function would return 0 and I wouldn't be able to print the last exit
  # code after the git branch
  local last_exit=$?
  local git_status="$(git status 2> /dev/null)"
  local output_styles=""

  # if [[ $git_status =~ "rebas" ]]; then
  #   output_styles="\e[1;35m"
  #   # Não funciona :shrug:
  if [[ $git_status =~ "nothing to commit, working tree clean" ]]; then
    output_styles="1;91"
    # vermelho
  elif [[ $git_status =~ "nothing added to commit but untracked files present" ]]; then
    output_styles="1;93"
    # amarelo
  elif [[ $git_status =~ "no changes added to commit" ]]; then
    output_styles="1;93"
    # amarelo
  elif [[ $git_status =~ "Changes to be committed" ]]; then
    output_styles="1;96"
    # azul claro
  fi

  echo -e "\e[$output_styles"m

  return $last_exit
}

git_branch() {
  # I have to keep track of last exit code so I can return it, otherwise
  # this function would return 0 and I wouldn't be able to print the last exit
  # code after the git branch
  local last_exit=$?
  local git_status="$(git status 2> /dev/null)"
  local on_branch="On branch ([^${IFS}]*)"
  local on_commit="HEAD detached at ([^${IFS}])"

  if [[ $git_status =~ $on_branch ]]; then
    local branch=${BASH_REMATCH[1]}
    printf "($branch)"
  elif [[ $git_status =~ $on_commit ]]; then
    local commit=${BASH_REMATCH[1]}
    printf "($commit)"
  fi

  # if [[ $git_status =~ "is ahead" ]]; then
  #   # fundo amarelo e letra preta e em negrito
  #   echo -e "\e[1;30;43m A \e[0m"
  #   # sublinhado
  # elif [[ $git_status =~ "diverged" ]]; then
  #   echo -e "\e[1;30;41m D \e[0m"
  #   # invertido
  # elif [[ $git_status =~ "behind" ]]; then
  #   echo -e "\e[1;30;45m B \e[0m"
  # fi

  return $last_exit
}

PS1_value='\[\e[1;92m\]\u@\h\[\e[0m\]:\[\e[1;94m\]\w\n'
# PS1_value='\[\e[1;92m\]\u@\h\[\e[0m\]:\[\e[1;94m\]\W'
PS1_value+="\[\$(git_color)\]\$(git_branch)\[\e[0m\]"
# https://stackoverflow.com/questions/16715103/bash-prompt-with-the-last-exit-code
PS1_value+='\[\e[1;35m\]$(code=${?##0};echo ${code:+[${code}]})\[\e[0m\]'
# PS1_last_line+='\[\e[0m\]$ '
PS1_value+='\[\e[0m\]λ '
export PS1=$PS1_value
# \u = usuário (lucas), \h = computador (kirby), \w = working directory,
# \W apenas o diretório atual, e não o caminho inteiro até ele
# 0 = sem estilo, 1 = negrito, 31 = vermelho, 32 = verde, 34 = azul
# Lembrando que o negrito além de ficar mais grosso, fica na versão "clara" da cor,
# isto é, 91 (vermelho claro) tem a mesma cor de 1;31, porém o segundo também é
# mais grosso, pois está em negrito
# Após a quebra de linha, é necessário redefinir a cor e o negrito para que não
# dê aquele bug visual de perder a cor quando redimensiona o terminal.
################################

. $HOME/.asdf/asdf.sh
. $HOME/.asdf/completions/asdf.bash
. $HOME/z.sh

sh ~/scripts/lambda-fetch.sh

#https://www.tecmint.com/tips-for-tmux-terminal-sessions/
# if command -v tmux &> /dev/null && [ -z "$TMUX" ]; then
if tmux ls 1>/dev/null 2>&1 && [ -z "$TMUX" ]; then
  printf "Já existe pelo menos uma instância do \e[32mtmux\e[0m rodando:\n"
  /bin/sh ~/scripts/parse-tmux-ls.sh
else
  # ORIGINAL_TERMINAL_EMULATOR
  if [ "$(ps -o 'cmd=' -p $(ps -o 'ppid=' -p $$))" = alacritty ]; then
    # tmux attach -t default || tmux new -s default
    /usr/bin/tmux
  fi
fi
