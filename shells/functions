# vim: ft=sh

lsg() {
  ls | grep -i $@
}

fzv() {
  # fzf and nvim
  # When doing results=`fzf`, some keybindings don't seem to work,
  # but they do when using $(fzf) instead.
  local results=$(fzf --multi --preview 'bat --color=always {}')
  [ -z $results ] && return

  echo "$results"
  echo "$results" | xargs -d '\n' nvim
}

git_fetch_checkout() {
  if [ -z "$1" ]; then
    return 1
  fi

  git fetch origin "$1"

  if [ "$?" -gt 0 ]; then
    exit "$?"
  fi

  git checkout "$1"
}

git_branch_delete_remote_if_not_local_with_same_name() {
  local local_branches=`git branch | tr -d '*'`
  local remote_branches=`git branch -r | grep -v '\<origin/HEAD\>'`
  local i=''
  for b in `echo $remote_branches`; do
    if ! `echo $local_branches | grep -q "\<${b##origin/}\>"`; then
      git branch -d -r $b
      i='.'
    fi
  done
  if [ -z $i ]; then
    echo 'Nada para deletar'
  fi
}

vimgit() {
  local conflict
  local staged
  local help
  local unknown_args
  local grep_pattern

  while [ "$#" -gt 0 ]; do
    case "$1" in
      -c|--conflict)
        conflict=sim
        shift
        ;;
      -s|--staged)
        staged=sim
        shift
        ;;
      -h|--help)
        help=sim
        break
        ;;
      -g|--grep)
        # TODO: Think about maybe passing grep options to grep?
        # Or at least make it possible to grep case insensitively?
        if [ -z "$2" ]; then
          echo 'An argument must be passed to -g or --grep option'
          return 1
        fi
        grep_pattern="$2"
        shift 2
        ;;
      *)
        unknown_args="$1, $unknown_args"
        shift
        ;;
    esac
  done

  if [ -n "$unknown_args" -o -n "$help" ]; then
    [ -n "$unknown_args" ] && echo "Unknown option \`${unknown_args%%, }\`"
    echo 'Possible options:'
    echo '    -c  --conflict  Only lists files with git conflict markers (lines starting with <<<<<<<, ======= or >>>>>>>)'
    echo '    -s  --staged    Only lists files that are staged'
    echo '    -g  --grep      Pass a pattern to grep over the result before opening files in vim'
    echo 'If both conflict and staged options are passed, staged is ignored.'
    # If unknown_args is not empty but help is, I'm going to both
    # print this help message and open vim. Do I want this?
    # Might be weird.
    [ -n "$help" ] && return
  fi

  if [ -n "$conflict" -a -n "$staged" ]; then
    echo 'Both conflict and staged options passed, using only conflict.'
  fi

  local files
  if [ -n "$conflict" ]; then
    files=`git status --porcelain | awk -v git_top_level=$(git rev-parse --show-toplevel) '{print git_top_level "/" $2}' | xargs grep -l '^[<=>]\{7\}'`
  elif [ -n "$staged" ]; then
    # Easier to use git diff than awk [[:blank:]] or something fancy
    files=`git diff --name-only --staged | awk -v git_top_level=$(git rev-parse --show-toplevel) '{print git_top_level "/" $1}'`
  else
    files=`git status --porcelain | awk -v git_top_level=$(git rev-parse --show-toplevel) '{print git_top_level "/" $2}'`
  fi

  [ -z $files ] && return

  (
    cd `git rev-parse --show-toplevel`
    if [ -n "$grep_pattern" ]; then
      nvim `echo $files | grep "$grep_pattern" | tr '\n' ' '`
    else
      nvim `echo $files | tr '\n' ' '`
    fi
  )
}

git_branch_grep_fzf() {
  imprimir_mensagem_mudando_de_branch() {
    echo "Mudando para \e[1m$1\e[0m"
  }

  if [ "$#" -eq 0 ]; then
    local branches=`git branch`
    local count=`echo $branches | wc -l`
    local selected=`echo "$branches" | fzf --height=$(expr 2 + $count)`

    if [ -z "$selected" ]; then; return; 3; fi

    selected=`echo "$selected" | tr -d '*' | tr -d '[[:blank:]]'`
    imprimir_mensagem_mudando_de_branch "$selected"
    git checkout `echo "$selected" | sed 's/^\*\?\s*//'`
    return
  fi

  while [ "$#" -gt 0 ]; do
    case "$1" in
      -)
        local checkout_last=yes
        ;;
      .)
        local checkout_dot=yes
        ;;
      -b)
        local create_and_checkout="$2"
        shift
        ;;
      -h|--help)
        echo 'Basicamente, recebe um padrão e busca uma branch git que casa com esse'
        echo 'padrão. Caso exista mais de uma, joga as possíveis branches no fzf.'
        echo 'A busca com o padrão ignora maiúsculas e minúsculas (grep -i).'
        echo 'Caso nenhum padrão seja passado, passa todas as branches direto para o fzf.'
        echo 'Caso duas branches casem com o padrão mas uma delas for a branch atual,'
        echo 'mudamos direto para a outra branch.'
        echo
        echo 'Também é possível passar algumas opções para alterar a funcionalidade:'
        echo
        echo '-           Ir para a última branch (git checkout -)'
        echo '.           Executa git checkout .'
        echo '-b          Criar e mudar para a branch (git checkout -b)'
        echo '-h --help   Mostra esse texto de ajuda'
        return
        ;;
      *)
        if [ -z "$grep_pattern" ]; then
          local grep_pattern="$1"
        fi
    esac
    shift
  done

  if [ -n "$checkout_last" ]; then
    echo Mudando para a última branch
    git checkout -
    return
  fi

  if [ -n "$create_and_checkout" ]; then
    echo "Criando e mudando para \e[1m$1\e[0m"
    git checkout -b "$create_and_checkout"
    return
  fi

  if [ -n "$checkout_dot" ]; then
    echo 'Executando `git checkout .`'
    git checkout .
    return
  fi

  # TODO: Deixei grep -i pra ser case insensitive. Pensar sobre.
  partial=`git branch | grep -i $grep_pattern`

  if [ -z "$partial" ]; then
    echo Nenhuma branch encontrada para o grep com "$grep_pattern"
    return 10
  fi

  count=`echo "$partial" | wc -l`
  if [ "$count" -eq 2 ] && echo "$partial" | grep -q '^*'; then
    # Esse sed dá match na branch que não é a atual
    # e tira os espaços do começo que houverem.
    local b=`echo "$partial" | sed -n 's/^[^*]\s*//p'`
    echo "Duas branches encontradas, mas uma era a atual.\nTrocando para a outra: \e[1m$b\e[0m"
    git checkout `echo "$partial" | grep -v '^*'`
    return
  elif [ "$count" -gt 1 ]; then
    echo Resultado com mais de uma branch encontrada para o grep com "$grep_pattern"
    local selected=`echo "$partial" | fzf --height=$(expr 2 + $count)`

    if [ -z "$selected" ]; then; return; 11; fi

    selected=`echo "$selected" | tr -d '*' | tr -d '[[:blank:]]'`
    imprimir_mensagem_mudando_de_branch "$selected"
    git checkout `echo $selected | sed 's/^\*\?\s*//'`
    return
  fi

  local b=`echo "$partial" | tr -d '*' | tr -d '[[:blank:]]'`
  imprimir_mensagem_mudando_de_branch "$b"
  git checkout "$b"
}

simplexev() {
  xev | awk -F '[ )]+' '/^KeyPress/ { a[NR+2] } NR in a { printf "%-3s %s\n", $5, $8 }'
}

# path() {
#   if [ $1 ] && [ $1 = '-h' -o $1 = '--help' -o $1 = 'help' ]; then
#     echo "To show rtx dirs, call path with -r flag"
#     return
#   fi

#   local show_rtx_path
#   if [ $1 ] && [ $1 = -r ]; then
#     show_rtx_path=sim
#   fi
#   result=`echo $PATH | tr ":" "\n"`
#   if [ -z $show_rtx_path ]; then
#     local rtx_data_dir="${RTX_DATA_DIR:-${XDG_DATA_HOME:-$HOME/.local/share}/rtx}/installs/"
#     result=`echo $result | sed "s|^$rtx_data_dir.*$|$rtx_data_dir...|" | uniq`
#   fi
#   echo $result
# }

redme() {
  if [ -f "$1" ]; then
    glow -p "$1"
  elif [ -d "$1" ]; then
    filename=$(ls "$1" | grep -i readme)
    glow -p "$1/$filename"
  elif [ -z "$1" ]; then
    ls | grep -i readme | xargs glow -p
  else
    exit 1
  fi
}

testnvim() {
  local log=/tmp/__log_testnvim__`date +%Y%m%d_%H%M%S`
  printf "\n\t\e[1mnvim --headless --startuptime $log +q && tail -1 $log && rm $log\e[0m\n\n"
  for i in `seq 10`; do
    nvim --headless --startuptime $log +q && tail -1 $log && rm $log
  done
  if ! which hyperfine 2>/dev/null 1>&2; then
    printf "\n\t\e[1mhyperfine is not installed\e[0m\n\n"
    return
  fi
  printf "\n\t\e[1mhyperfine 'nvim +q' --warmup 5\e[0m\n\n"
  hyperfine 'nvim +q' --warmup 5
}

testmix() {
  if [ "$1" = '-f' ]; then
    res=$(mix test --failed)
    echo $res | mix test --failed | grep "test.*_test\.exs:.*(test)" | sort -n
    return
  fi

  mix test $@

  res=$(mix test --failed)
  echo $res | mix test --failed | grep "test.*_test\.exs:.*(test)" | sort -n
}

[ -f "$HOME/.local/functions.local" ] && source "$HOME/.local/functions.local"
