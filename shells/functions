# vim: ft=sh

fv() {
  # fzf and nvim
  local results=`fzf`
  [ -z $results ] && return

  nvim "$results"
}

vimgit() {
  # files=`git status --porcelain | awk '{print $2}' | sort -u | tr "\n" ' '`
  local files=`git status --porcelain | awk '{print $2}' | tr '\n' ' '`
  # local files=`git status --porcelain | awk -v git_top_level=$(git rev-parse --show-toplevel) '{print git_top_level "/" $2}' | tr '\n' ' '`
  [ -z $files ] && return

  (
    cd `git rev-parse --show-toplevel`
    nvim `echo $files`
  )
}

simplexev() {
  xev | awk -F '[ )]+' '/^KeyPress/ { a[NR+2] } NR in a { printf "%-3s %s\n", $5, $8 }'
}

# path() {
#   if [ $1 ] && [ $1 = '-h' -o $1 = '--help' -o $1 = 'help' ]; then
#     echo "To show rtx dirs, call path with -r flag"
#     return
#   fi

#   local show_rtx_path
#   if [ $1 ] && [ $1 = -r ]; then
#     show_rtx_path=sim
#   fi
#   result=`echo $PATH | tr ":" "\n"`
#   if [ -z $show_rtx_path ]; then
#     local rtx_data_dir="${RTX_DATA_DIR:-${XDG_DATA_HOME:-$HOME/.local/share}/rtx}/installs/"
#     result=`echo $result | sed "s|^$rtx_data_dir.*$|$rtx_data_dir...|" | uniq`
#   fi
#   echo $result
# }

redme() {
  if [ -f "$1" ]; then
    glow -p "$1"
  elif [ -d "$1" ]; then
    filename=$(ls "$1" | grep -i readme)
    glow -p "$1/$filename"
  elif [ -z "$1" ]; then
    ls | grep -i readme | xargs glow -p
  else
    exit 1
  fi
}

testnvim() {
  local log=/tmp/__log_testnvim__`date +%Y%m%d_%H%M%S`
  printf "\n\t\e[1mnvim --headless --startuptime $log +q && tail -1 $log && rm $log\e[0m\n\n"
  for i in `seq 10`; do
    nvim --headless --startuptime $log +q && tail -1 $log && rm $log
  done
  if ! which hyperfine 2>/dev/null 1>&2; then
    printf "\n\t\e[1mhyperfine is not installed\e[0m\n\n"
    return
  fi
  printf "\n\t\e[1mhyperfine 'nvim +q' --warmup 5\e[0m\n\n"
  hyperfine 'nvim +q' --warmup 5
}

testmix() {
  if [ "$1" = '-f' ]; then
    res=$(mix test --failed)
    echo $res | mix test --failed | grep "test.*_test\.exs:.*(test)" | sort -n
    return
  fi

  mix test $@

  res=$(mix test --failed)
  echo $res | mix test --failed | grep "test.*_test\.exs:.*(test)" | sort -n
}

[ -f "$HOME/.local/functions.local" ] && source "$HOME/.local/functions.local"
