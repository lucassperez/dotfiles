source "$HOME/.asdf/asdf.sh"
fpath=(${ASDF_DIR}/completions $ZDOTDIR/completions $fpath)

autoload -Uz compinit
zstyle ':completion:*' menu select
zmodload zsh/complist
compinit

# Include hidden files
_comp_options+=(globdots)

setopt hist_ignore_all_dups inc_append_history
HISTFILE=~/.cache/zsh/history
HISTSIZE=4000
SAVEHIST=4000

# Lines configured by zsh-newuser-install
setopt nomatch notify
unsetopt autocd beep extendedglob
# End of lines configured by zsh-newuser-install

bindkey -e

command_not_found_handler() {
  # https://askubuntu.com/questions/1226574/how-do-i-enable-zsh-package-suggestions-as-in-ubuntu-bash
  # calls the nice command-not-found handle function that shows a message
  # with package suggestions, just like it was in bash
  # If on debian, might have to install the `command-not-found` package
  # https://unix.stackexchange.com/questions/67466/how-to-implement-package-install-suggestion-on-debian
  if [ -x /usr/lib/command-not-found ]; then
    /usr/lib/command-not-found -- "$1"
  elif [ -x /usr/share/command-not-found/command-not-found ]; then
    /usr/share/command-not-found/command-not-found -- "$1"
  else
    echo "$1: Command not found" >&2
    return 127
  fi
}

git_color() {
  local git_status="$(git status 2> /dev/null)"
  local output_styles=""

  # if [[ $git_status =~ "rebas" ]]; then
  #   output_styles="\e[1;35m"
  #   # Não funciona :shrug:
  if [[ $git_status =~ "nothing to commit, working tree clean" ]]; then
    output_styles="9"
    # vermelho
  elif [[ $git_status =~ "nothing added to commit but untracked files present" ]]; then
    output_styles="11"
    # amarelo
  elif [[ $git_status =~ "no changes added to commit" ]]; then
    output_styles="11"
    # amarelo
  elif [[ $git_status =~ "Changes to be committed" ]]; then
    output_styles="14"
    # azul claro
  else
    output_styles="white"
  fi
  output_styles="%F{$output_styles}$1%f"

  if [[ $git_status =~ "is ahead" ]]; then
    output_styles="%S$output_styles%s"
  elif [[ $git_status =~ "diverged" ]]; then
    output_styles="%K{red}%F{black} D %f%k$output_styles"
  elif [[ $git_status =~ "behind" ]]; then
    output_styles="%U$output_styles%u"
  fi

  echo "$output_styles"
}

autoload -Uz vcs_info
precmd() { vcs_info }
zstyle ':vcs_info:git:*' formats '(%b)'
setopt PROMPT_SUBST

# Cores escuras / claras
# vermelho | verde | amarelo | azul | magenta | ciano | branco | preto/cinza
#   1/9    |  2/10 |   3/11  | 4/12 |   5/13  |  6/14 |  7/15  |     8/16
# https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Prompt-Expansion
PROMPT='%B%F{green}%n@%m%F{white}:%F{blue}%~
%B$(git_color ${vcs_info_msg_0_})%0(?..%F{magenta}[%?])%f%bλ '
# RPROMPT='%B%F{6}{zsh}%f%b'

# Ways to show my distro at the right
## Full name
# RPROMPT='%B%F{6}{$(grep ^ID= /etc/os-release | cut -d = -f 2)}%f%b'
## Only the first three letters, hopefully
RPROMPT='%B%F{6}{$(grep ^ID= /etc/os-release | cut -b 4-6)}%f%b'
## Why not hard code it? (:
# RPROMPT='%B%F{6}{debian}%f%b'
# RPROMPT='%B%F{6}{deb}%f%b'

# This is cute, but too slow.
# It shows at the right the version of the programming language used at current
# project. Asdf is slow, though.
# lang_or_zsh() {
#   # lang=$(sh ~/scripts/git-stuff/asdf-lang-version.sh 2>/dev/null)
#   lang=$(sh ~/scripts/git-stuff/simplified-project-lang.sh)
#   echo ${lang:-zsh}
# }
# RPROMPT='%B%F{6}{$(lang_or_zsh)}%f%b'

source "$HOME/.aliases"

bindkey "^F" clear-screen
bindkey "^T" kill-line
bindkey "^U" kill-region

# OBS: Enter produz "^M"
# https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Menu-selection
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -M menuselect '^M' accept-search
bindkey -M menuselect 'u' undo
bindkey -M menuselect 'i' accept-and-hold
bindkey -M menuselect 'a' accept-and-infer-next-history
bindkey -M menuselect 'q' send-break

# https://stackoverflow.com/questions/37772712/zsh-how-to-make-tab-completion-need-no-space-to-next-word-after-cursor
bindkey "^I" expand-or-complete-prefix

# https://stackoverflow.com/questions/815686/unable-to-make-a-backward-tab-as-shift-tab-in-zsh
bindkey '^[[Z' reverse-menu-complete

# Control + esquerda/direita, respectivamente
bindkey ";5D" backward-word
bindkey ";5C" forward-word

# Dentro do tmux, control + esquerda/direita está gerando isso
bindkey "5D" backward-word
bindkey "5C" forward-word

source "$ZDOTDIR/plugins/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh"

# Será que isso devia ficar aqui?
# Aumenta a quantidade de vezes que uma tecla é apertada quando seguramos ela
# xset r rate 220 25

eval "$(zoxide init zsh)"

# https://superuser.com/questions/1585256/inserting-ssh-agent-into-i3wms-startup-so-its-available-to-all-processes-in-th
# eval $(keychain --eval --agents ssh --quick --quiet)

sh "$HOME/scripts/lambda-fetch.sh"

# https://www.tecmint.com/tips-for-tmux-terminal-sessions/
if tmux ls 1>/dev/null 2>&1 && [ -z "$TMUX" ]; then
  printf "Já existe pelo menos uma instância do \e[32mtmux\e[0m rodando:\n"
  /bin/sh ~/scripts/parse-tmux-ls.sh
else
  # ORIGINAL_TERMINAL_EMULATOR
  if [ "$(ps -o 'cmd=' -p $(ps -o 'ppid=' -p $$))" = alacritty ]; then
    # tmux attach -t default || tmux new -s default
    /usr/bin/tmux
  fi
fi
