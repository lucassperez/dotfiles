source "$HOME/.asdf/asdf.sh"
# source "$ASDF_DIR/asdf.sh" I don't know why this does not work
fpath=(${ASDF_DIR}/completions $ZDOTDIR/completions $fpath)

autoload -Uz compinit
zstyle ':completion:*' menu select
zmodload zsh/complist
compinit

# Include hidden files
_comp_options+=(globdots)

setopt hist_ignore_all_dups inc_append_history
HISTFILE="$XDG_CACHE_HOME/zsh/history"
HISTSIZE=4000
SAVEHIST=4000

# Lines configured by zsh-newuser-install
setopt nomatch notify
unsetopt autocd beep extendedglob
# End of lines configured by zsh-newuser-install

bindkey -e

command_not_found_handler() {
  # https://askubuntu.com/questions/1226574/how-do-i-enable-zsh-package-suggestions-as-in-ubuntu-bash
  # calls the nice command-not-found handle function that shows a message
  # with package suggestions, just like it was in bash
  # If on debian, might have to install the `command-not-found` package
  # https://unix.stackexchange.com/questions/67466/how-to-implement-package-install-suggestion-on-debian
  if [ -x /usr/lib/command-not-found ]; then
    /usr/lib/command-not-found -- "$1"
  elif [ -x /usr/share/command-not-found/command-not-found ]; then
    /usr/share/command-not-found/command-not-found -- "$1"
  else
    echo "$1: Command not found" >&2
    return 127
  fi
}

autoload -Uz vcs_info
precmd() { vcs_info }
setopt PROMPT_SUBST

zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:git*' check-for-changes true
zstyle ':vcs_info:git*' unstagedstr '%F{11}'
zstyle ':vcs_info:git*' stagedstr '%F{14}'

# === Minimal one line prompt

zstyle ':vcs_info:git*+set-message:*' hooks my-git-remote-comparison-styling
zstyle ':vcs_info:git*' formats ' %F{9}%u%m%c%b'
PROMPT='%B%F{green}%~${vcs_info_msg_0_}%u%s%0(?.. %F{magenta}%?)%f%b Î» '

# ===  Big two line prompt

# zstyle ':vcs_info:git*' formats '%F{9}%u%c%m(%b)'
# zstyle ':vcs_info:git*+set-message:*' hooks my-git-remote-comparison-styling
# PROMPT='%B%F{green}%n@%m%F{white}:%F{blue}%~
# %B${vcs_info_msg_0_}%u%s%0(?..%F{magenta}[%?])%f%bÎ» '

# Cores escuras / claras
# vermelho | verde | amarelo | azul | magenta | ciano | branco | preto/cinza
#   1/9    |  2/10 |   3/11  | 4/12 |   5/13  |  6/14 |  7/15  |     8/16
# https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Prompt-Expansion

+vi-my-git-remote-comparison-styling() {
  local unstaged_files=$(git status --porcelain 2>/dev/null)
  if [ -n "$unstaged_files" ]; then
    hook_com[misc]='%F{11}'
  fi

  local git_status="$(git status 2> /dev/null)"

  case $git_status in
    *ahead*)
      hook_com[misc]='%S'
      ;;
    *diverged*)
      hook_com[misc]='%K{red}%F{black} D %f%k '
      ;;
    *behind*)
      hook_com[misc]='%U'
      ;;
  esac
}

# short_os_name=$(grep ^ID= /etc/os-release | cut -b 4-6)
# RPROMPT='%B%F{6}{$short_os_name}%f%b'
# RPROMPT='%B%F{6}{zsh}%f%b'
# RPROMPT='%B%F{6}%*%f%b'

# This is cute, but too slow.
# It shows at the right the version of the programming language used at current
# project. Asdf is slow, though.
# lang_or_zsh() {
#   # lang=$(sh ~/scripts/git-stuff/asdf-lang-version.sh 2>/dev/null)
#   lang=$(sh ~/scripts/git-stuff/simplified-project-lang.sh)
#   echo ${lang:-zsh}
# }
# RPROMPT='%B%F{6}{$(lang_or_zsh)}%f%b'

source "$HOME/.aliases"
source "$HOME/.functions"

# Run bindkey to see all bindings

# "To know the code of a key, execute cat, press enter, press the key, then Ctrl+C."
# https://stackoverflow.com/questions/8638012/fix-key-settings-home-end-insert-delete-in-zshrc-when-running-zsh-in-terminat
# Another way to know what a combination produces is to hit Control + V and then the combination/key.
bindkey "^[[3~" delete-char
bindkey "^[[H" beginning-of-line
bindkey "^[[F" end-of-line
bindkey "^H" backward-kill-word
bindkey "^[[3;5~" kill-word
# The "transpose-words" is such a nice command
# ^_ is "Control + /", although ESC+t and ESC+T are already mapped to transpose
bindkey "^_" transpose-words

bindkey "^F" clear-screen
bindkey "^T" kill-line
bindkey "^U" backward-kill-line

# OBS: Enter produz "^M"
# https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Menu-selection
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -M menuselect '^M' accept-search
bindkey -M menuselect 'u' undo
bindkey -M menuselect 'i' accept-and-hold
bindkey -M menuselect 'a' accept-and-infer-next-history
bindkey -M menuselect 'q' send-break

# https://stackoverflow.com/questions/37772712/zsh-how-to-make-tab-completion-need-no-space-to-next-word-after-cursor
bindkey "^I" expand-or-complete-prefix
# bindkey "^I" complete-word

# https://stackoverflow.com/questions/815686/unable-to-make-a-backward-tab-as-shift-tab-in-zsh
bindkey '^[[Z' reverse-menu-complete # shift tab

# Control + esquerda/direita, respectivamente
bindkey ";5D" backward-word
bindkey ";5C" forward-word

# Dentro do tmux, control + esquerda/direita estÃ¡ gerando isso
bindkey "5D" backward-word
bindkey "5C" forward-word

source "$ZDOTDIR/plugins/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh"

# SerÃ¡ que isso devia ficar aqui?
# Aumenta a quantidade de vezes que uma tecla Ã© apertada quando seguramos ela
# xset r rate 220 25

eval "$(zoxide init zsh)"

# https://superuser.com/questions/1585256/inserting-ssh-agent-into-i3wms-startup-so-its-available-to-all-processes-in-th
# eval $(keychain --eval --agents ssh --quick --quiet)

sh "$HOME/scripts/lambda-fetch.sh"

# https://www.tecmint.com/tips-for-tmux-terminal-sessions/
if tmux ls 1>/dev/null 2>&1 && [ -z "$TMUX" ]; then
  printf "JÃ¡ existe pelo menos uma instÃ¢ncia do \e[32mtmux\e[0m rodando:\n"
  . "$HOME/scripts/parse-tmux-ls.sh"
else
  # ORIGINAL_TERMINAL_EMULATOR

  # if [ "$(ps -o 'cmd=' -p $(ps -o 'ppid=' -p $$))" = alacritty ]; then

  # This will not start tmux if I run alacritty with other options, like this:
  # alacritty -t floating-alacritty -o window.opacity=1.0
  # With the above, it would work. But do I want it? ðŸ¤”
  if [ $(ps -o 'cmd=' -p $(ps -o 'ppid=' -p $$) | cut -d ' ' -f 1) = alacritty ]; then
    `which tmux`
  fi
fi
